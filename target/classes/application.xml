<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
            http://www.springframework.org/schema/mvc   
            http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd   
            http://www.springframework.org/schema/context   
            http://www.springframework.org/schema/context/spring-context-3.0.xsd   
            http://www.springframework.org/schema/aop   
            http://www.springframework.org/schema/aop/spring-aop-3.0.xsd   
            http://www.springframework.org/schema/tx   
            http://www.springframework.org/schema/tx/spring-tx-3.0.xsd ">

	<!-- 1.加载数据库配置的属性文件 -->
	<context:property-placeholder location="classpath:jdbc.properties" />

	<!-- 2.包扫描:dao,service -->
	<context:annotation-config />
	<context:component-scan base-package="cn.com.wavenet" />
	
	<bean id="dataSource" class="cn.com.wavenet.factory.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="jdbc154" value-ref="jdbc154" />
				<entry key="jdbc252" value-ref="jdbc252" />
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="jdbc252" />
	</bean>

	<bean id="jdbc154" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc154.driver}" />
		<property name="url" value="${jdbc154.jdbcUrl}" />
		<property name="username" value="${jdbc154.user}" />
		<property name="password" value="${jdbc154.password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${maxActive}"></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${maxIdle}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${maxWait}"></property>
	</bean>

	<bean id="jdbc252" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc252.driver}" />
		<property name="url" value="${jdbc252.jdbcUrl}" />
		<property name="username" value="${jdbc252.user}" />
		<property name="password" value="${jdbc252.password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${maxActive}"></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${maxIdle}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${maxWait}"></property>
	</bean>
	

	<!-- JDBC模板定义 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 4.SessionFactory -->
	<bean id="SqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
				<!-- 加载mybatis的全局配置文件 -->  
		<property name="configLocation" value="classpath:mybaits-cfg.xml"></property>
		<property name="dataSource" ref="dataSource" />
		<!-- 整合mybatis，包扫描mapper文件 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:cn/com/wavenet/mapping/BasicMapper.xml</value>
			</list>
		</property>

		<!-- <property name="mapperLocations" value="classpath:cn/com/wavenet/hydro/databaseOpt/mapper/base/*.xml"></property> -->
	</bean>
	
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">  
        <constructor-arg index="0" ref="SqlSessionFactory"/>  
    </bean>
	<bean id="sqlMapper" class="com.github.abel533.sql.SqlMapper" scope="prototype">
	  <constructor-arg ref="sqlSession"/>
	</bean>

	<!-- mapper批量扫描，从mapper包中扫描出mapper接口，自动创建代理对象并且在spring容器中注入 遵循规范:将mapper.java和mapper.xml映射文件名称保持一致，且在一个目录中. 
		自动扫描出来的mapper的bean的id为mapper类名(首字母小写) -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage"
			value="cn.com.wavenet.dao" />
	</bean>

	<!-- 5.事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 注解方式配置事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
<!-- 
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
				<value>application/json;charset=UTF-8</value>
			</list>
		</property>
	</bean> -->
     <!-- 启动对@AspectJ注解的支持  -->
    <aop:aspectj-autoproxy  proxy-target-class="true"/></beans>  